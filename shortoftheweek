#!/usr/bin/env ruby

require 'open-uri'
require 'nokogiri'

site_page = "http://www.shortoftheweek.com/"
rss_file = ENV['HOME'] + "/public_html/vitorgalvao/rss/shortoftheweek.rss"

# get latest short
home_page = Nokogiri::HTML(open(site_page))
latest_short_page_link = home_page.at('#slider a').attr('href')
page = Nokogiri::HTML(open(latest_short_page_link))

video_title = page.at('h1').content
video_link = page.at('a.fancybox-video').attr('href')
video_image = page.at('a.fancybox-video img').attr('src')
video_description = page.at('.synopsis p').to_html

# create feed
if !File.file?(rss_file)
  tmp_feed = Nokogiri::XML::Builder.new do |xml|
    xml.rss("version" => "2.0") {
      xml.channel {
        xml.title "Short of the Week"
        xml.link site_page
        xml.description "Direct links to Short of the Week videos"
      }
    }
  end
  rss_feed = Nokogiri::XML(tmp_feed.to_xml)
else
  rss_feed = Nokogiri::XML(File.open(rss_file))

  # abort if most recent item link is the same as the newly retrieved one
  # else save the most recent for later, and continue
  most_recent_item_link = rss_feed.at('item').at('link').content
  if (most_recent_item_link == video_link)
    abort 'There are no new items to add'
  else
    recent_items = rss_feed.css('item')[0..9] # save recent items
    rss_feed.css('item').remove # removes all items
  end
end

# add new item to feed
Nokogiri::XML::Builder.with(rss_feed.at('channel')) do |xml|
  xml.item {
    xml.title video_title
    xml.link video_link
    xml.description "<img src='#{video_image}'>#{video_description}"
  }
end

# add previously grabbed items (if any) and save
rss_feed.at('channel').add_child(recent_items) unless recent_items.nil?

File.open(rss_file, "w") do |f|
  f.puts rss_feed.to_xml
end
